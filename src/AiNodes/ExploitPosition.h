//
// Created by etien on 02/02/2022.
//

#ifndef HALITESUPERSMARTBOT_EXPLOITPOSITION_H
#define HALITESUPERSMARTBOT_EXPLOITPOSITION_H


#include "src/BehaviourTree.h"
#include "src/PointOfInterest.h"
#include "src/ActionNodes.h"

// Move the ship toward a position and disable the node
class MoveTowardPositionOnce : public bt::Sequencer {

    bool mReached = false;
public:

    MoveTowardPositionOnce(int mShipId, hlt::Position mpPoi);
    BT_GETNAME_OVERRIDE

};

// Check the neighbour cells and move to them if it's worth it
class MoveToBestCell : public bt::Sequencer {
    hlt::EntityId mShipID;
    hlt::Position mTargetCell;
public:
    explicit MoveToBestCell(int mShipId);
    BT_GETNAME_OVERRIDE
};

// Gather and store halite
class GatherHalite : public bt::Selector {
    hlt::Position mClosestDropoff;

    // State inside node
    enum {
        Gather,
        GoToDropoff,
        BecomeDropoff,
    } mState = Gather;

public:
    explicit GatherHalite(int mShipId);
    BT_GETNAME_OVERRIDE
};

// Give a ship a location to exploit
class ExploitPosition : public bt::Selector {

public:
    hlt::Position mPositionToExploit;

    ExploitPosition(int mShipId, hlt::Position position);
    BT_GETNAME_OVERRIDE

};


#endif //HALITESUPERSMARTBOT_EXPLOITPOSITION_H
